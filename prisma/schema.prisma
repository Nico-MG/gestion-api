generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RefundDetails {
  refund_id  Int 
  product_id Int 
  quantity   Int
  refunds    Refunds  @relation(fields: [refund_id], references: [refund_id], onDelete: Cascade, onUpdate: Cascade)
  products   Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([refund_id, product_id])
}

model PurchaseDetails {
  purchase_id Int   
  product_id  Int 
  quantity    Int
  unit_price  Int
  line_total  Int
  purchases   Purchases @relation(fields: [purchase_id], references: [purchase_id], onDelete: Cascade, onUpdate: Cascade)
  products    Products  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([purchase_id, product_id])
}

model SaleDetails {
  sale_id    Int  
  product_id Int   
  quantity   Int
  unit_price Int
  line_total Int
  products   Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
  sales      Sales    @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade, onUpdate: Cascade)

  @@id([sale_id, product_id])
}

model Refunds {
  refund_id      Int             @id @default(autoincrement())
  refund_code    String          @db.VarChar(20)
  sale_id        Int         
  date           DateTime
  description    String
  image_refund   String
  refund_details RefundDetails[]
  sales          Sales?          @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade, onUpdate: Cascade)
}

model Notifications {
  notification_id Int       @id @default(autoincrement())
  product_id      Int   
  date            DateTime
  title           String    @db.VarChar(20)
  description     String
  products        Products? @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: Cascade)
}

model Purchases {
  purchase_id      Int                @id @default(autoincrement())
  purchase_code    String             @db.VarChar(20)
  provider_rut     String           
  user_rut         String
  date             DateTime
  total_price      Int
  purchase_details PurchaseDetails[]
  providers        Providers?        @relation(fields: [provider_rut], references: [provider_rut], onDelete: Cascade, onUpdate: Cascade)
  users            Users?            @relation(fields: [user_rut], references: [user_rut], onDelete: Cascade, onUpdate: Cascade)
}

model Products {
  product_id       Int               @id @default(autoincrement())
  product_code     String            @db.VarChar(20)
  name             String            @db.VarChar(20)
  type             String            @db.VarChar(20)
  quantity         Int
  min_quantity     Int
  price            Int
  refund_details   RefundDetails[]
  purchase_details PurchaseDetails[]
  sale_details     SaleDetails[]
  notifications    Notifications[]
}

model Providers {
  provider_rut String      @id @db.VarChar(20)
  name         String      @db.VarChar(20)
  address      String      @db.VarChar(20)
  phone        String      @db.VarChar(20)
  type         String      @db.VarChar(20)
  purchases    Purchases[]
}

model Users {
  user_rut  String      @id @db.VarChar(20)
  mail      String      @unique @db.VarChar(50)
  password  String      @db.VarChar(60)
  name      String      @db.VarChar(20)
  lastname  String      @db.VarChar(20)
  role      String      @db.VarChar(20)
  purchases Purchases[]
  sales     Sales[]
}

model Sales {
  sale_id      Int           @id @default(autoincrement())
  sale_code    String        @db.VarChar(20)
  client_rut   String        @db.VarChar(20)
  user_rut     String
  date         DateTime
  total_price  Int
  sale_details SaleDetails[]
  refunds      Refunds[]
  users        Users?        @relation(fields: [user_rut], references: [user_rut], onDelete: Cascade, onUpdate: Cascade)
}
