generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Clients {
  client_rut String  @id @db.VarChar(20)
  name       String? @db.VarChar(20)
  lastname   String? @db.VarChar(20)
  sales      Sales[]
}

model RefundDetails {
  refund_id  String   @db.VarChar(20)
  product_id String   @db.VarChar(20)
  quantity   Int?
  refunds    Refunds  @relation(fields: [refund_id], references: [refund_id], onDelete: Cascade)
  products   Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@id([refund_id, product_id])
}

model OrderDetails {
  order_id   String   @db.VarChar(20)
  product_id String   @db.VarChar(20)
  quantity   Int?
  unit_price  Int?
  line_total Int?
  orders     Orders   @relation(fields: [order_id], references: [order_id], onDelete: Cascade)
  products   Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)

  @@id([order_id, product_id])
}

model SaleDetails {
  sale_id    String   @db.VarChar(20)
  product_id String   @db.VarChar(20)
  quantity   Int?
  unit_price Int?
  line_total Int?
  products   Products @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  sales      Sales    @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade)

  @@id([sale_id, product_id])
}

model Refunds {
  refund_id      String          @id @db.VarChar(20)
  sale_id        String?         @db.VarChar(20)
  date           DateTime?       @db.Timestamp(6)
  description    String?
  refund_details RefundDetails[]
  sales          Sales?          @relation(fields: [sale_id], references: [sale_id], onDelete: Cascade)
}

model Notifications {
  notification_id Int       @id @default(autoincrement())
  date            DateTime? @db.Timestamp(6)
  product_id      String?   @db.VarChar(20)
  title           String?   @db.VarChar(20)
  description     String?
  products        Products? @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
}

model Orders {
  order_id       String         @id @db.VarChar(20)
  provider_rut   String?        @db.VarChar(20)
  user_rut       String?        @db.VarChar(20)
  date           DateTime?      @db.Timestamp(6)
  total_purchase Int?
  order_details  OrderDetails[]
  providers      Providers?     @relation(fields: [provider_rut], references: [provider_rut], onDelete: Cascade)
  users          Users?         @relation(fields: [user_rut], references: [user_rut], onDelete: Cascade)
}

model Products {
  product_id     String          @id @db.VarChar(20)
  name           String?         @db.VarChar(20)
  type           String?         @db.VarChar(20)
  quantity       Int?
  min_quantity   Int?
  price          Int?
  refund_details RefundDetails[]
  order_details  OrderDetails[]
  sale_details   SaleDetails[]
  notifications  Notifications[]
}

model Providers {
  provider_rut String   @id @db.VarChar(20)
  name         String?  @db.VarChar(20)
  address      String?  @db.VarChar(20)
  phone        String?  @db.VarChar(20)
  type         String?  @db.VarChar(20)
  orders       Orders[]
}

model Users {
  user_rut String   @id @db.VarChar(20)
  mail     String?  @db.VarChar(50)
  password String?  @db.VarChar(60)
  name     String?  @db.VarChar(20)
  lastname String?  @db.VarChar(20)
  orders   Orders[]
  sales    Sales[]
}

model Sales {
  sale_id      String        @id @db.VarChar(20)
  client_rut   String?       @db.VarChar(20)
  user_rut     String?       @db.VarChar(20)
  date         DateTime?     @db.Timestamp(6)
  total_price  Int?
  sale_details SaleDetails[]
  refunds      Refunds[]
  clients      Clients?      @relation(fields: [client_rut], references: [client_rut], onDelete: Cascade)
  users        Users?        @relation(fields: [user_rut], references: [user_rut], onDelete: Cascade)
}
